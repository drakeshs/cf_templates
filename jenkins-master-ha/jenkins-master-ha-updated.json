{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Jenkins 2: highly available Jenkins master and dynamic agents",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": { "default" : "Network Configuration" },
          "Parameters": [ "VPC", "SubnetA", "SubnetB", "SubnetC"]
        },
        {
          "Label": { "default": "Load Balancer" },
          "Parameters": [ "MasterELBScheme", "MasterELBSubnets", "MasterELBSG" ]
        },
        {
            "Label": { "default": "Jenkins Master" },
            "Parameters": [ "MasterInstanceType", "MasterIAMRole", "MasterIP", "MasterSG", "MasterStorageSG", "MasterAdminPassword", "MasterLogsRetentionInDays"]
        },
        {
            "Label": { "default": "Jenkins Agent" },
            "Parameters": [ "AgentInstanceType", "AgentIAMRole", "AgentIP", "AgentSG", "AgentELBSG", "AgentVolumeSize", "AgentDesiredCapacity", "AgentMinSize", "AgentMaxSize", "AgentTerminatingLifecycleHookIAMRole", "AgentMaxBuildWaitTimeInSeconds", "AgentLogsRetentionInDays"]
        },
        {
          "Label": { "default": "SSH Access" },
          "Parameters": [ "IAMUserSSHAccess", "KeyName" ]
        }
      ],
      "ParameterLabels": {
        "VPC" : { "default": "VPC" },
        "SubnetA": { "default": "Subnet A" },
        "SubnetB": { "default": "Subnet B" },
        "SubnetC": { "default": "Subnet C" },
        "MasterELBScheme": { "default": "Scheme" },
        "MasterELBSubnets": { "default":  "Subnets" },
        "MasterELBSG": {"default": "Security Group" },
        "IAMUserSSHAccess": { "default": "SSH Access" },
        "KeyName": { "default": "Key Name" },
        "MasterInstanceType": { "default": "Instance Type" },
        "MasterIAMRole": { "default": "IAM Role" },
        "MasterIP": { "default": "IAM Instance Profile" },
        "MasterStorageSG": { "default": "Storage Security Group" },
        "MasterSG": { "default": "Security Group" },
        "MasterAdminPassword": { "default": "Admin Password" },
        "MasterLogsRetentionInDays": { "default": "Logs Retention" },
        "AgentInstanceType": { "default": "Instance Type" },
        "AgentIAMRole": { "default": "IAM Role"},
        "AgentIP": { "default": "IAM Instance Profile"},
        "AgentSG": { "default": "Security Group"},
        "AgentELBSG": { "default": "ELB Security Group" },
        "AgentVolumeSize": { "default": "Volume Size" },
        "AgentMinSize": { "default": "Min" },
        "AgentMaxSize": { "default": "Max" },
        "AgentTerminatingLifecycleHookIAMRole": { "default": "Lifecycle Hook Role ARN" },
        "AgentDesiredCapacity": { "default": "Desired Capacity" },
        "AgentMaxBuildWaitTimeInSeconds": { "default": "Build Timeout" },
        "AgentLogsRetentionInDays": { "default": "Logs Retention" }
      }
    }
  },
  "Parameters": {
    "VPC": {
      "Description": "Required. Use VPC output from vpc stack.",
      "Type": "AWS::EC2::VPC::Id",
      "AllowedPattern": "^vpc-[0-9a-z]{8}"
    },
    "SubnetA": {
      "Description": "Required. Use SubnetAPublic or SubnetAPrivate output from vpc stack. If you choose SubnetAPrivate you need a NAT instance or a NAT gateway.",
      "Type": "AWS::EC2::Subnet::Id",
      "AllowedPattern" : "^subnet-[0-9a-z]{8}"
    },
    "SubnetB": {
      "Description": "Required. Use SubnetBPublic or SubnetBPrivate output from vpc stack. If you choose SubnetBPrivate you need a NAT instance or a NAT gateway.",
      "Type": "AWS::EC2::Subnet::Id",
      "AllowedPattern" : "^subnet-[0-9a-z]{8}"
    },
    "SubnetC": {
      "Description": "Required. Use SubnetCPublic or SubnetCPrivate output from vpc stack. If you choose SubnetCPrivate you need a NAT instance or a NAT gateway.",
      "Type": "AWS::EC2::Subnet::Id",
      "AllowedPattern" : "^subnet-[0-9a-z]{8}"
    },
    "KeyName": {
      "Description": "Optional key pair of the ec2-user to establish a SSH connection to the Jenkins master and agents.",
      "Type": "String",
      "Default": ""
    },
    "IAMUserSSHAccess": {
      "Description": "Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).",
      "Type": "String",
      "AllowedValues": ["true", "false"],
      "Default": "false"
    },
    "MasterELBScheme": {
      "Description": "Indicates whether the load balancer in front of the Jenkins master is Internet-facing or internal.",
      "Type": "String",
      "AllowedValues": ["internet-facing", "internal"],
      "Default": "internet-facing"
    },
    "MasterELBSubnets": {
      "Description": "Required. Use SubnetAPublic, SubntBPublic and SubnetCPublic outputs for ELBScheme internet-facing or SubnetAPrivate, SubnetBPrivate and SubnetCPrivate outputs for ELBScheme internal from vpc stack.",
      "Type": "List<AWS::EC2::Subnet::Id>",
      "AllowedPattern" : "^subnet-[0-9a-z]{8}"
    },
    "MasterInstanceType": {
      "Description": "The instance type of the Jenkins master.",
      "Type": "String",
      "AllowedValues": ["t2.micro", "t2.medium", "m4.large", "m4.xlarge", "m3.large", "m3.xlarge"],
      "Default": "t2.micro"
    },
    "MasterSG": {
      "Description": "Required. The Jenkins Master Security Group.",
      "Type": "List<AWS::EC2::SecurityGroup::Id>",
      "AllowedPattern": "^sg-[0-9a-z]{8}"
    },
    "MasterIAMRole": {
      "Description": "The Jenkins Master IAM Role.",
      "Type": "String"
    },
    "MasterIP": {
      "Description": "The Jenkins Master Instance Profile.",
      "Type": "String"
    },
    "MasterStorageSG": {
      "Description": "Required. The Jenkins Storage Security Group.",
      "Type": "List<AWS::EC2::SecurityGroup::Id>",
      "AllowedPattern": "^sg-[0-9a-z]{8}"
    },
    "MasterELBSG": {
      "Description": "Required. The ELB Security Group.",
      "Type": "List<AWS::EC2::SecurityGroup::Id>",
      "AllowedPattern": "^sg-[0-9a-z]{8}"
    },
    "MasterAdminPassword": {
      "Description": "A password for the Jenkins master admin.",
      "Type": "String",
      "NoEcho": "true"
    },
    "MasterLogsRetentionInDays": {
      "Description": "Specifies the number of days you want to retain log events in the specified log group.",
      "Type": "Number",
      "AllowedValues": [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653],
      "Default": 14
    },
    "AgentInstanceType": {
      "Description": "The instance type of the Jenkins agents.",
      "Type": "String",
      "AllowedValues": ["t2.micro", "t2.medium", "m4.large", "m4.xlarge", "m3.large", "m3.xlarge"],
      "Default": "t2.medium"
    },
    "AgentSG": {
      "Description": "Required. The Agent Security Group.",
      "Type": "List<AWS::EC2::SecurityGroup::Id>",
      "AllowedPattern": "^sg-[0-9a-z]{8}"
    },
    "AgentIAMRole": {
      "Description": "The Jenkins Agent IAM Role.",
      "Type": "String"
    },
    "AgentIP": {
      "Description": "The Jenkins Agent Instance Profile.",
      "Type": "String"
    },
    "AgentELBSG": {
      "Description": "Required. The ELB Security Group.",
      "Type": "List<AWS::EC2::SecurityGroup::Id>",
      "AllowedPattern": "^sg-[0-9a-z]{8}"
    },
    "AgentVolumeSize": {
      "Description": "The volume size, in Gibibytes (GiB). This can be a number from 8 to 1024.",
      "Type": "Number",
      "Default": "8",
      "MinValue": "8",
      "MaxValue": "1024"
    },
    "AgentMaxSize": {
      "Description": "The maximum size of the agents Auto Scaling group.",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1"
    },
    "AgentMinSize": {
      "Description": "The minimum size of the agents Auto Scaling group.",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1"
    },
    "AgentTerminatingLifecycleHookIAMRole": {
      "Description": "The Agent Terminating Lifecycle Hook IAM Role ARN.",
      "Type": "String"
    },
    "AgentDesiredCapacity": {
      "Description": "The desired start size of the agents Auto Scaling group. Minimum 1",
      "Type": "Number",
      "Default": "1",
      "MinValue": "1"
    },
    "AgentMaxBuildWaitTimeInSeconds": {
      "Description": "Maximum time in seconds an agent can continue with a build although it should be scaled down.",
      "Type": "Number",
      "Default": "600",
      "MinValue": "600",
      "MaxValue": "3600"
    },
    "AgentLogsRetentionInDays": {
      "Description": "Specifies the number of days you want to retain log events in the specified log group.",
      "Type": "Number",
      "AllowedValues": [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653],
      "Default": 14
    }
  },
  "Conditions": {
    "ZeroAgents": {"Fn::Equals": ["0", {"Ref": "AgentDesiredCapacity"}]},
    "HasKeyName": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "KeyName"}]}]},
    "HasIAMUserSSHAccess": {"Fn::Equals": ["true", {"Ref": "IAMUserSSHAccess"}]}
  },
  "Mappings": {
    "RegionMapMaster": {
      "ap-south-1": {"AMI": "ami-ffbdd790"},
      "eu-west-1": {"AMI": "ami-f9dd458a"},
      "ap-southeast-1": {"AMI": "ami-a59b49c6"},
      "ap-southeast-2": {"AMI": "ami-dc361ebf"},
      "eu-central-1": {"AMI": "ami-ea26ce85"},
      "ap-northeast-2": {"AMI": "ami-2b408b45"},
      "ap-northeast-1": {"AMI": "ami-374db956"},
      "us-east-1": {"AMI": "ami-f35f1de4"},
      "sa-east-1": {"AMI": "ami-6dd04501"},
      "us-west-1": {"AMI": "ami-31490d51"},
      "us-west-2": {"AMI": "ami-7172b611"}
    },
    "RegionMapSlave": {
      "ap-south-1": {"AMI": "ami-ffbdd790"},
      "eu-west-1": {"AMI": "ami-f9dd458a"},
      "ap-southeast-1": {"AMI": "ami-a59b49c6"},
      "ap-southeast-2": {"AMI": "ami-dc361ebf"},
      "eu-central-1": {"AMI": "ami-ea26ce85"},
      "ap-northeast-2": {"AMI": "ami-2b408b45"},
      "ap-northeast-1": {"AMI": "ami-374db956"},
      "us-east-1": {"AMI": "ami-f35f1de4"},
      "sa-east-1": {"AMI": "ami-6dd04501"},
      "us-west-1": {"AMI": "ami-31490d51"},
      "us-west-2": {"AMI": "ami-7172b611"}
    }
  },
  "Resources": {
    "MasterStorage": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "FileSystemTags": [{
          "Value": "jenkins-master-storage",
          "Key": "Name"
        }],
        "PerformanceMode": "generalPurpose"
      }
    },
    "MasterStorageMountTargetA": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {"Ref": "MasterStorage"},
        "SecurityGroups": {"Ref": "MasterStorageSG"},
        "SubnetId": {"Ref": "SubnetA"}
      }
    },
    "MasterStorageMountTargetB": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {"Ref": "MasterStorage"},
        "SecurityGroups": {"Ref": "MasterStorageSG"},
        "SubnetId": {"Ref": "SubnetB"}
      }
    },
    "MasterStorageMountTargetC": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {"Ref": "MasterStorage"},
        "SecurityGroups": {"Ref": "MasterStorageSG"},
        "SubnetId": {"Ref": "SubnetC"}
      }
    },
    "MasterELB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Scheme": {"Ref": "MasterELBScheme"},
        "SecurityGroups": {"Ref": "MasterELBSG"},
        "Subnets": {"Ref": "MasterELBSubnets"},
        "Tags": [{
          "Key": "Name",
          "Value": "jenkins-master"
        }]
      }
    },
    "MasterELBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPath": "/login",
        "HealthCheckPort": 8080,
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 3,
        "UnhealthyThresholdCount": 3,
        "Matcher": {
          "HttpCode": "200"
        },
        "Port": 8080,
        "Protocol": "HTTP",
        "Tags": [{
          "Key": "Name",
          "Value": "jenkins-master"
        }],
        "VpcId": {"Ref": "VPC"}
      }
    },
    "MasterELBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "TargetGroupArn": {"Ref": "MasterELBTargetGroup"},
          "Type": "forward"
        }],
        "LoadBalancerArn": {"Ref": "MasterELB"},
        "Port": 80,
        "Protocol": "HTTP"
      }
    },
    "MasterLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": {"Ref": "MasterLogsRetentionInDays"}
      }
    },
    "MasterLC": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": {"Fn::If": ["HasIAMUserSSHAccess", ["ssh-access", "mount",  "install", "setup"], ["mount",  "install", "setup"]]}
          },
          "ssh-access": {
            "files": {
              "/opt/authorized_keys_command.sh": {
                "content": {"Fn::Join": ["", [
                  "#!/bin/bash -e", "\n",
                  "if [ -z \"$1\" ]; then", "\n",
                  "  exit 1", "\n",
                  "fi", "\n",
                  "aws iam list-ssh-public-keys --user-name \"$1\" --query \"SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]\" --output text | while read KeyId; do", "\n",
                  "  aws iam get-ssh-public-key --user-name \"$1\" --ssh-public-key-id \"$KeyId\" --encoding SSH --query \"SSHPublicKey.SSHPublicKeyBody\" --output text", "\n",
                  "done", "\n"
                ]]},
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/opt/import_users.sh": {
                "content": {"Fn::Join": ["", [
                  "#!/bin/bash", "\n",
                  "aws iam list-users --query \"Users[].[UserName]\" --output text | while read User; do", "\n",
                  "  if id -u \"$User\" >/dev/null 2>&1; then", "\n",
                  "    echo \"$User exists\"", "\n",
                  "  else", "\n",
                  "    /usr/sbin/adduser \"$User\"", "\n",
                  "    echo \"$User ALL=(ALL) NOPASSWD:ALL\" > \"/etc/sudoers.d/$User\"", "\n",
                  "  fi", "\n",
                  "done", "\n"
                ]]},
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/etc/cron.d/import_users": {
                "content": {"Fn::Join": ["", [
                  "*/10 * * * * root /opt/import_users.sh", "\n"
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "a_configure_sshd_command": {
                "command": "sed -i 's:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g' /etc/ssh/sshd_config"
              },
              "b_configure_sshd_commanduser": {
                "command": "sed -i 's:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g' /etc/ssh/sshd_config"
              },
              "c_import_users": {
                "command": "./import_users.sh",
                "cwd": "/opt"
              }
            },
            "services": {
              "sysvinit": {
                "sshd": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "commands": [
                    "a_configure_sshd_command",
                    "b_configure_sshd_commanduser"
                  ]
                }
              }
            }
          },
          "mount": {
            "packages": {
              "yum": {
                "nfs-utils": []
              },
              "rubygems": {
                "aws-sdk": ["2.2.29"],
                "daemons": ["1.2.3"]
              }
            },
            "commands": {
              "a_groupadd": {
                "command": "groupadd -g 497 jenkins",
                "test": "if grep -q jenkins /etc/group; then exit 1; else exit 0; fi"
              },
              "b_useradd": {
                "command": "adduser -u 498 -g 497 -s /bin/false -d /var/lib/jenkins -c 'Jenkins Continuous Integration Server' jenkins",
                "test": "if grep -q jenkins /etc/passwd; then exit 1; else exit 0; fi"
              },
              "c_mountpoint_mkdir": {
                "command": "mkdir /var/lib/jenkins && chown -R jenkins:jenkins /var/lib/jenkins",
                "test": "[ ! -d /var/lib/jenkins ]"
              },
              "d_mountpoint_mount": {
                "command": {"Fn::Join": ["", ["mount -t nfs4 -o vers=4.1 \"$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone).", {"Ref": "MasterStorage"}, ".efs.", {"Ref": "AWS::Region"}, ".amazonaws.com:/\" /var/lib/jenkins"]]},
                "test": "if mount | grep -q /var/lib/jenkins; then exit 1; else exit 0; fi"
              }
            }
          },
          "install": {
            "packages": {
              "rpm": {
                "jenkins": "http://pkg.jenkins-ci.org/redhat-stable/jenkins-2.7.4-1.1.noarch.rpm"
              },
              "yum": {
                "git": [],
                "awslogs": []
              }
            },
            "files": {
              "/etc/awslogs/awscli.conf": {
                "content": {"Fn::Join": ["", [
                  "[default]", "\n",
                  "region = ", {"Ref": "AWS::Region"}, "\n",
                  "\n",
                  "[plugins]", "\n",
                  "cwlogs = cwlogs", "\n"
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/awslogs/awslogs.conf": {
                "content": {"Fn::Join": ["", [
                  "[general]", "\n",
                  "state_file = /var/lib/awslogs/agent-state", "\n",
                  "\n",
                  "[/var/log/messages]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/messages", "\n",
                  "log_stream_name = {instance_id}/var/log/messages", "\n",
                  "log_group_name = ", {"Ref": "MasterLogs"}, "\n",
                  "\n",
                  "[/var/log/secure]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/secure", "\n",
                  "log_stream_name = {instance_id}/var/log/secure", "\n",
                  "log_group_name = ", {"Ref": "MasterLogs"}, "\n",
                  "\n",
                  "[/var/log/cron]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/cron", "\n",
                  "log_stream_name = {instance_id}/var/log/cron", "\n",
                  "log_group_name = ", {"Ref": "MasterLogs"}, "\n",
                  "\n",
                  "[/var/log/cloud-init.log]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/cloud-init.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cloud-init.log", "\n",
                  "log_group_name = ", {"Ref": "MasterLogs"}, "\n",
                  "\n",
                  "[/var/log/cfn-init.log]", "\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S", "\n",
                  "file = /var/log/cfn-init.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cfn-init.log", "\n",
                  "log_group_name = ", {"Ref": "MasterLogs"}, "\n",
                  "\n",
                  "[/var/log/cfn-hup.log]", "\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S", "\n",
                  "file = /var/log/cfn-hup.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cfn-hup.log", "\n",
                  "log_group_name = ", {"Ref": "MasterLogs"}, "\n",
                  "\n",
                  "[/var/log/cfn-init-cmd.log]", "\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S", "\n",
                  "file = /var/log/cfn-init-cmd.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cfn-init-cmd.log", "\n",
                  "log_group_name = ", {"Ref": "MasterLogs"}, "\n",
                  "\n",
                  "[/var/log/cloud-init-output.log]", "\n",
                  "file = /var/log/cloud-init-output.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cloud-init-output.log", "\n",
                  "log_group_name = ", {"Ref": "MasterLogs"}, "\n",
                  "\n",
                  "[/var/log/dmesg]", "\n",
                  "file = /var/log/dmesg", "\n",
                  "log_stream_name = {instance_id}/var/log/dmesg", "\n",
                  "log_group_name = ", {"Ref": "MasterLogs"}, "\n",
                  "\n",
                  "[/var/log/jenkins/jenkins.log]", "\n",
                  "datetime_format = %d %b %Y %H:%M:%S", "\n",
                  "multi_line_start_pattern = {datetime_format}", "\n",
                  "file = /var/log/jenkins/jenkins.log", "\n",
                  "log_stream_name = {instance_id}/var/log/jenkins/jenkins.log", "\n",
                  "log_group_name = ", {"Ref": "MasterLogs"}, "\n",
                  "\n"
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {"Fn::Join": ["", [
                  "[main]", "\n",
                  "stack=", {"Ref": "AWS::StackId"}, "\n",
                  "region=", {"Ref": "AWS::Region"}, "\n",
                  "interval=1", "\n"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {"Fn::Join": ["", [
                  "[cfn-auto-reloader-hook]", "\n",
                  "triggers=post.update", "\n",
                  "path=Resources.MasterLC.Metadata.AWS::CloudFormation::Init", "\n",
                  "action=/opt/aws/bin/cfn-init --verbose --stack=", {"Ref": "AWS::StackName"}, " --region=", {"Ref": "AWS::Region"}, " --resource=MasterLC", "\n",
                  "runas=root", "\n"
                ]]}
              },
              "/etc/init.d/lifecycle-poller": {
                "source": "https://s3-eu-west-1.amazonaws.com/widdix-aws-cf-templates/jenkins/files/lifecycle-poller/lifecycle-poller",
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/opt/lifecycle-poller/poller.conf": {
                "content": {"Fn::Join": ["", [
                  "region: ", {"Ref": "AWS::Region"}, "\n",
                  "queueUrl: ", {"Ref": "AgentTerminatingLifecycleHookQueue"}, "\n",
                  "maxWaitInSeconds: ", {"Ref": "AgentMaxBuildWaitTimeInSeconds"}, "\n",
                  "masterAdminPassword: ", {"Ref": "MasterAdminPassword"}, "\n"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/opt/lifecycle-poller/daemon.rb": {
                "source": "https://s3-eu-west-1.amazonaws.com/widdix-aws-cf-templates/jenkins/files/lifecycle-poller/daemon.rb",
                "mode": "000500",
                "owner": "root",
                "group": "root"
              },
              "/opt/lifecycle-poller/worker.rb": {
                "source": "https://s3-eu-west-1.amazonaws.com/widdix-aws-cf-templates/jenkins/files/lifecycle-poller/worker.rb",
                "mode": "000500",
                "owner": "root",
                "group": "root"
              }
            },
            "services": {
              "sysvinit": {
                "awslogs": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "packages": {
                    "yum": ["awslogs"]
                  },
                  "files": [
                    "/etc/awslogs/awslogs.conf",
                    "/etc/awslogs/awscli.conf"
                  ]
                },
                "jenkins": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "packages": {
                    "rpm": ["jenkins"]
                  }
                },
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                },
                "lifecycle-poller": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/init.d/lifecycle-poller",
                    "/opt/lifecycle-poller/poller.conf",
                    "/opt/lifecycle-poller/daemon.rb",
                    "/opt/lifecycle-poller/worker.rb"
                  ]
                }
              }
            }
          },
          "setup": {
            "files": {
              "/root/plugins.txt": {
                "content": {"Fn::Join": ["", [
                  "cloudbees-folder", "\n",
                  "timestamper", "\n",
                  "workflow-aggregator", "\n",
                  "subversion", "\n",
                  "ldap", "\n",
                  "antisamy-markup-formatter", "\n",
                  "ws-cleanup", "\n",
                  "github-organization-folder", "\n",
                  "ssh-slaves", "\n",
                  "email-ext", "\n",
                  "build-timeout", "\n",
                  "ant", "\n",
                  "pipeline-stage-view", "\n",
                  "matrix-auth", "\n",
                  "mailer", "\n",
                  "credentials-binding", "\n",
                  "gradle", "\n",
                  "git", "\n",
                  "pam-auth", "\n"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cron.d/cloudwatch-build-queue": {
                "content": {"Fn::Join": ["", [
                  "SHELL=/bin/bash", "\n",
                  "PATH=/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin", "\n",
                  "MAILTO=root", "\n",
                  "HOME=/", "\n",
                  "* * * * * root aws --region ", {"Ref": "AWS::Region"}, " cloudwatch put-metric-data --namespace ", {"Ref": "AWS::StackName"}, " --metric-name BuildQueue --value $(curl -s 'http://admin:", {"Ref": "MasterAdminPassword"}, "@localhost:8080/queue/api/xml' | grep -o '<item' | wc -l) --unit Count", "\n"
                ]]},
                "mode": "000600",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "a_await_jenkins": {
                "command": "until $(curl --output /dev/null --silent --head --fail --user \"admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)\" http://localhost:8080/cli/); do printf '.'; sleep 1; done",
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              },
              "b_activate_slave_agent_port": {
                "command": "sed -i -e \"s@<slaveAgentPort>.*</slaveAgentPort>@<slaveAgentPort>49817</slaveAgentPort>@\" /var/lib/jenkins/config.xml",
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              },
              "c_restart_jenkins": {
                "command":  "service jenkins restart",
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              },
              "d_await_jenkins": {
                "command": "until $(curl --output /dev/null --silent --head --fail --user \"admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)\" http://localhost:8080/cli/); do printf '.'; sleep 1; done",
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              },
              "e_install_plugins": {
                "command": "while read -r plugin; do java -jar /var/cache/jenkins/war/WEB-INF/jenkins-cli.jar -s \"http://localhost:8080/\" -noKeyAuth install-plugin \"$plugin\" --username admin --password \"$(cat /var/lib/jenkins/secrets/initialAdminPassword)\"; done < /root/plugins.txt",
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              },
              "f_restart_jenkins": {
                "command":  "service jenkins restart",
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              },
              "g_await_jenkins": {
                "command": "until $(curl --output /dev/null --silent --head --fail --user \"admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)\" http://localhost:8080/cli/); do printf '.'; sleep 1; done",
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              },
              "h_set_admin_password": {
                "command": {"Fn::Join": ["", ["echo 'jenkins.model.Jenkins.instance.securityRealm.createAccount(\"admin\", \"", {"Ref": "MasterAdminPassword"}, "\")' | java -jar /var/cache/jenkins/war/WEB-INF/jenkins-cli.jar -s \"http://localhost:8080/\" -noKeyAuth groovy = --username admin --password \"$(cat /var/lib/jenkins/secrets/initialAdminPassword)\""]]},
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              },
              "z_create_setup_done_file": {
                "command": "echo \"Setup done. Don not delete this file.\" > /var/lib/jenkins/setup_done.txt",
                "test": "[ ! -f /var/lib/jenkins/setup_done.txt ]"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {"Fn::FindInMap": ["RegionMapMaster", {"Ref": "AWS::Region"}, "AMI"]},
        "IamInstanceProfile": {"Ref": "MasterIP"},
        "InstanceType": {"Ref": "MasterInstanceType"},
        "SecurityGroups": {"Ref": "MasterSG"},
        "KeyName": {"Fn::If": ["HasKeyName", {"Ref": "KeyName"}, {"Ref": "AWS::NoValue"}]},
        "UserData": {"Fn::Base64": {"Fn::Join": ["", [
          "#!/bin/bash -x", "\n",
          "/opt/aws/bin/cfn-init -v --stack ", {"Ref": "AWS::StackName"}, " --resource MasterLC --region ", {"Ref": "AWS::Region"}, "\n",
          "/opt/aws/bin/cfn-signal -e $? --stack ", {"Ref": "AWS::StackName"}, " --resource MasterASG --region ", {"Ref": "AWS::Region"}, "\n"
        ]]}}
      }
    },
    "MasterASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": ["MasterStorageMountTargetA", "MasterStorageMountTargetB"],
      "Properties": {
        "LaunchConfigurationName": {"Ref": "MasterLC"},
        "MinSize": "1",
        "MaxSize": "1",
        "DesiredCapacity": "1",
        "HealthCheckGracePeriod": 900,
        "HealthCheckType": "ELB",
        "VPCZoneIdentifier": [{"Ref": "SubnetA"}, {"Ref": "SubnetB"}, {"Ref": "SubnetC"} ],
        "TargetGroupARNs": [{"Ref": "MasterELBTargetGroup"}],
        "Tags": [{
          "PropagateAtLaunch": true,
          "Value": "jenkins-master",
          "Key": "Name"
        }]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT20M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "PauseTime": "PT20M",
          "WaitOnResourceSignals": true
        }
      }
    },
    "AgentELB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Scheme": "internal",
        "SecurityGroups": {"Ref": "AgentELBSG"},
        "Subnets": [{"Ref": "SubnetA"}, {"Ref": "SubnetB"}, {"Ref": "SubnetC"} ],
        "Tags": [{
          "Key": "Name",
          "Value": "jenkins-agent"
        }]
      }
    },
    "AgentELBTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPath": "/",
        "HealthCheckPort": 8080,
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 3,
        "UnhealthyThresholdCount": 3,
        "Matcher": {
          "HttpCode": "200"
        },
        "Port": 8080,
        "Protocol": "HTTP",
        "Tags": [{
          "Key": "Name",
          "Value": "jenkins-agent"
        }],
        "VpcId": {"Ref": "VPC"}
      }
    },
    "AgentELBListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "TargetGroupArn": {"Ref": "AgentELBTargetGroup"},
          "Type": "forward"
        }],
        "LoadBalancerArn": {"Ref": "AgentELB"},
        "Port": 8080,
        "Protocol": "HTTP"
      }
    },
    "AgentLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "RetentionInDays": {"Ref": "AgentLogsRetentionInDays"}
      }
    },
    "AgentLC": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "default": {"Fn::If": ["HasIAMUserSSHAccess", ["ssh-access", "install", "setup"], ["install", "setup"]]}
          },
          "ssh-access": {
            "files": {
              "/opt/authorized_keys_command.sh": {
                "content": {"Fn::Join": ["", [
                  "#!/bin/bash -e", "\n",
                  "if [ -z \"$1\" ]; then", "\n",
                  "  exit 1", "\n",
                  "fi", "\n",
                  "aws iam list-ssh-public-keys --user-name \"$1\" --query \"SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]\" --output text | while read KeyId; do", "\n",
                  "  aws iam get-ssh-public-key --user-name \"$1\" --ssh-public-key-id \"$KeyId\" --encoding SSH --query \"SSHPublicKey.SSHPublicKeyBody\" --output text", "\n",
                  "done", "\n"
                ]]},
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/opt/import_users.sh": {
                "content": {"Fn::Join": ["", [
                  "#!/bin/bash", "\n",
                  "aws iam list-users --query \"Users[].[UserName]\" --output text | while read User; do", "\n",
                  "  if id -u \"$User\" >/dev/null 2>&1; then", "\n",
                  "    echo \"$User exists\"", "\n",
                  "  else", "\n",
                  "    /usr/sbin/adduser \"$User\"", "\n",
                  "    echo \"$User ALL=(ALL) NOPASSWD:ALL\" > \"/etc/sudoers.d/$User\"", "\n",
                  "  fi", "\n",
                  "done", "\n"
                ]]},
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/etc/cron.d/import_users": {
                "content": {"Fn::Join": ["", [
                  "*/10 * * * * root /opt/import_users.sh", "\n"
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "a_configure_sshd_command": {
                "command": "sed -i 's:#AuthorizedKeysCommand none:AuthorizedKeysCommand /opt/authorized_keys_command.sh:g' /etc/ssh/sshd_config"
              },
              "b_configure_sshd_commanduser": {
                "command": "sed -i 's:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser nobody:g' /etc/ssh/sshd_config"
              },
              "c_import_users": {
                "command": "./import_users.sh",
                "cwd": "/opt"
              }
            },
            "services": {
              "sysvinit": {
                "sshd": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "commands": [
                    "a_configure_sshd_command",
                    "b_configure_sshd_commanduser"
                  ]
                }
              }
            }
          },
          "install": {
            "packages": {
              "yum": {
                "git": [],
                "awslogs": []
              }
            },
            "files": {
              "/etc/awslogs/awscli.conf": {
                "content": {"Fn::Join": ["", [
                  "[default]", "\n",
                  "region = ", {"Ref": "AWS::Region"}, "\n",
                  "\n",
                  "[plugins]", "\n",
                  "cwlogs = cwlogs", "\n"
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/awslogs/awslogs.conf": {
                "content": {"Fn::Join": ["", [
                  "[general]", "\n",
                  "state_file = /var/lib/awslogs/agent-state", "\n",
                  "\n",
                  "[/var/log/messages]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/messages", "\n",
                  "log_stream_name = {instance_id}/var/log/messages", "\n",
                  "log_group_name = ", {"Ref": "AgentLogs"}, "\n",
                  "\n",
                  "[/var/log/secure]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/secure", "\n",
                  "log_stream_name = {instance_id}/var/log/secure", "\n",
                  "log_group_name = ", {"Ref": "AgentLogs"}, "\n",
                  "\n",
                  "[/var/log/cron]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/cron", "\n",
                  "log_stream_name = {instance_id}/var/log/cron", "\n",
                  "log_group_name = ", {"Ref": "AgentLogs"}, "\n",
                  "\n",
                  "[/var/log/cloud-init.log]", "\n",
                  "datetime_format = %b %d %H:%M:%S", "\n",
                  "file = /var/log/cloud-init.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cloud-init.log", "\n",
                  "log_group_name = ", {"Ref": "AgentLogs"}, "\n",
                  "\n",
                  "[/var/log/cfn-init.log]", "\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S", "\n",
                  "file = /var/log/cfn-init.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cfn-init.log", "\n",
                  "log_group_name = ", {"Ref": "AgentLogs"}, "\n",
                  "\n",
                  "[/var/log/cfn-hup.log]", "\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S", "\n",
                  "file = /var/log/cfn-hup.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cfn-hup.log", "\n",
                  "log_group_name = ", {"Ref": "AgentLogs"}, "\n",
                  "\n",
                  "[/var/log/cfn-init-cmd.log]", "\n",
                  "datetime_format = %Y-%m-%d %H:%M:%S", "\n",
                  "file = /var/log/cfn-init-cmd.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cfn-init-cmd.log", "\n",
                  "log_group_name = ", {"Ref": "AgentLogs"}, "\n",
                  "\n",
                  "[/var/log/cloud-init-output.log]", "\n",
                  "file = /var/log/cloud-init-output.log", "\n",
                  "log_stream_name = {instance_id}/var/log/cloud-init-output.log", "\n",
                  "log_group_name = ", {"Ref": "AgentLogs"}, "\n",
                  "\n",
                  "[/var/log/dmesg]", "\n",
                  "file = /var/log/dmesg", "\n",
                  "log_stream_name = {instance_id}/var/log/dmesg", "\n",
                  "log_group_name = ", {"Ref": "AgentLogs"}, "\n",
                  "\n",
                  "[/var/log/jenkins/jenkins.log]", "\n",
                  "datetime_format = %d %b %Y %H:%M:%S", "\n",
                  "multi_line_start_pattern = {datetime_format}", "\n",
                  "file = /var/log/jenkins/jenkins.log", "\n",
                  "log_stream_name = {instance_id}/var/log/jenkins/jenkins.log", "\n",
                  "log_group_name = ", {"Ref": "AgentLogs"}, "\n",
                  "\n"
                ]]},
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/cfn-hup.conf": {
                "content": {"Fn::Join": ["", [
                  "[main]", "\n",
                  "stack=", {"Ref": "AWS::StackId"}, "\n",
                  "region=", {"Ref": "AWS::Region"}, "\n",
                  "interval=1", "\n"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {"Fn::Join": ["", [
                  "[cfn-auto-reloader-hook]", "\n",
                  "triggers=post.update", "\n",
                  "path=Resources.AgentLC.Metadata.AWS::CloudFormation::Init", "\n",
                  "action=/opt/aws/bin/cfn-init --verbose --stack=", {"Ref": "AWS::StackName"}, " --region=", {"Ref": "AWS::Region"}, " --resource=AgentLC", "\n",
                  "runas=root", "\n"
                ]]}
              }
            },
            "commands": {
              "a_groupadd": {
                "command": "groupadd -g 497 jenkins",
                "test": "if grep -q jenkins /etc/group; then exit 1; else exit 0; fi"
              },
              "b_useradd": {
                "command": "adduser -u 498 -g 497 -s /bin/bash -d /var/lib/jenkins -c 'Jenkins Continuous Integration Server' jenkins",
                "test": "if grep -q jenkins /etc/passwd; then exit 1; else exit 0; fi"
              },
              "c_mkdir": {
                "command": "mkdir /var/lib/jenkins && chown -R jenkins:jenkins /var/lib/jenkins",
                "test": "[ ! -d /var/lib/jenkins ]"
              }
            },
            "services": {
              "sysvinit": {
                "awslogs": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "packages": {
                    "yum": ["awslogs"]
                  },
                  "files": [
                    "/etc/awslogs/awslogs.conf",
                    "/etc/awslogs/awscli.conf"
                  ]
                },
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                }
              }
            }
          },
          "setup": {
            "packages": {
              "rubygems": {
                "aws-sdk": ["2.2.29"],
                "daemons": ["1.2.3"]
              }
            },
            "files": {
              "/root/agent.xml": {
                "source": "https://s3-eu-west-1.amazonaws.com/widdix-aws-cf-templates/jenkins/files/agent.xml",
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/root/check-agent.sh": {
                "content": {"Fn::Join": ["", [
                  "#!/bin/bash -ex", "\n",
                  "masterInstanceId=$(aws --region ", {"Ref": "AWS::Region"}, " autoscaling describe-auto-scaling-groups --auto-scaling-group-names ", {"Ref": "MasterASG"}, " --query 'AutoScalingGroups[0].Instances[0].InstanceId' --output text)", "\n",
                  "masterIP=$(aws --region ", {"Ref": "AWS::Region"}, " ec2 describe-instances --instance-ids $masterInstanceId --query 'Reservations[0].Instances[0].PrivateIpAddress' --output text)", "\n",
                  "java -jar jenkins-cli.jar -s http://$masterIP:8080 -noKeyAuth get-node $(curl -s http://169.254.169.254/latest/meta-data/instance-id) --username admin --password ", {"Ref": "MasterAdminPassword"}, "\n"
                ]]},
                "mode": "000500",
                "owner": "root",
                "group": "root"
              },
              "/root/create-agent.sh": {
                "content": {"Fn::Join": ["", [
                  "#!/bin/bash -ex", "\n",
                  "masterInstanceId=$(aws --region ", {"Ref": "AWS::Region"}, " autoscaling describe-auto-scaling-groups --auto-scaling-group-names ", {"Ref": "MasterASG"}, " --query 'AutoScalingGroups[0].Instances[0].InstanceId' --output text)", "\n",
                  "masterIP=$(aws --region ", {"Ref": "AWS::Region"}, " ec2 describe-instances --instance-ids $masterInstanceId --query 'Reservations[0].Instances[0].PrivateIpAddress' --output text)", "\n",
                  "cat /root/agent.xml | java -jar jenkins-cli.jar -s http://$masterIP:8080 -noKeyAuth create-node $(curl -s http://169.254.169.254/latest/meta-data/instance-id) --username admin --password ", {"Ref": "MasterAdminPassword"}, "\n"
                ]]},
                "mode": "000500",
                "owner": "root",
                "group": "root"
              },
              "/var/lib/jenkins/start-agent.sh": {
                "content": {"Fn::Join": ["", [
                  "#!/bin/bash -ex", "\n",
                  "masterInstanceId=$(aws --region ", {"Ref": "AWS::Region"}, " autoscaling describe-auto-scaling-groups --auto-scaling-group-names ", {"Ref": "MasterASG"}, " --query 'AutoScalingGroups[0].Instances[0].InstanceId' --output text)", "\n",
                  "masterIP=$(aws --region ", {"Ref": "AWS::Region"}, " ec2 describe-instances --instance-ids $masterInstanceId --query 'Reservations[0].Instances[0].PrivateIpAddress' --output text)", "\n",
                  "java -jar slave.jar -jnlpUrl http://$masterIP:8080/computer/$(curl -s http://169.254.169.254/latest/meta-data/instance-id)/slave-agent.jnlp -jnlpCredentials admin:", {"Ref": "MasterAdminPassword"}, "\n"
                ]]},
                "mode": "000500",
                "owner": "jenkins",
                "group": "jenkins"
              },
              "/etc/init.d/agent-healthcheck": {
                "source": "https://s3-eu-west-1.amazonaws.com/widdix-aws-cf-templates/jenkins/files/agent-healthcheck/agent-healthcheck",
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/opt/agent-healthcheck/healthcheck.conf": {
                "content": {"Fn::Join": ["", [
                  "region: ", {"Ref": "AWS::Region"}, "\n",
                  "masterASG: ", {"Ref": "MasterASG"}, "\n",
                  "masterAdminPassword: ", {"Ref": "MasterAdminPassword"}, "\n"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/opt/agent-healthcheck/daemon.rb": {
                "source": "https://s3-eu-west-1.amazonaws.com/widdix-aws-cf-templates/jenkins/files/agent-healthcheck/daemon.rb",
                "mode": "000500",
                "owner": "root",
                "group": "root"
              },
              "/opt/agent-healthcheck/server.rb": {
                "source": "https://s3-eu-west-1.amazonaws.com/widdix-aws-cf-templates/jenkins/files/agent-healthcheck/server.rb",
                "mode": "000500",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "d_download_slave_jar": {
                "command": {"Fn::Join": ["", ["wget http://", {"Fn::GetAtt": ["MasterELB", "DNSName"]}, "/jnlpJars/slave.jar"]]},
                "cwd": "/var/lib/jenkins",
                "test": "[ ! -f /var/lib/jenkins/slave.jar ]"
              },
              "e_download_cli_jar": {
                "command": {"Fn::Join": ["", ["wget http://", {"Fn::GetAtt": ["MasterELB", "DNSName"]}, "/jnlpJars/jenkins-cli.jar"]]},
                "cwd": "/var/lib/jenkins",
                "test": "[ ! -f /var/lib/jenkins/jenkins-cli.jar ]"
              },
              "f_create_agent": {
                "command": "/root/create-agent.sh",
                "cwd": "/var/lib/jenkins",
                "test": "if /root/check-agent.sh; then exit 1; else exit 0; fi"
              },
              "g_start_agent": {
                "command": "su - jenkins -c 'screen -m -d -S agent /var/lib/jenkins/start-agent.sh'",
                "cwd": "/var/lib/jenkins",
                "test": "if su - jenkins -c 'screen -ls' | grep -q agent; then exit 1; else exit 0; fi"
              }
            },
            "services": {
              "sysvinit": {
                "agent-healthcheck": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/init.d/agent-healthcheck",
                    "/opt/agent-healthcheck/healthcheck.conf",
                    "/opt/agent-healthcheck/daemon.rb",
                    "/opt/agent-healthcheck/server.rb"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {"Fn::FindInMap": ["RegionMapSlave", {"Ref": "AWS::Region"}, "AMI"]},
        "IamInstanceProfile": {"Ref": "AgentIP"},
        "InstanceType": {"Ref": "AgentInstanceType"},
        "SecurityGroups": {"Ref": "AgentSG"},
        "KeyName": {"Fn::If": ["HasKeyName", {"Ref": "KeyName"}, {"Ref": "AWS::NoValue"}]},
        "BlockDeviceMappings": [{
          "DeviceName": "/dev/xvda",
          "Ebs": {
            "VolumeSize": {"Ref": "AgentVolumeSize"},
            "VolumeType": "gp2"
          }
        }],
        "UserData": {"Fn::Base64": {"Fn::Join": ["", [
          "#!/bin/bash -x", "\n",
          "/opt/aws/bin/cfn-init -v --stack ", {"Ref": "AWS::StackName"}, " --resource AgentLC --region ", {"Ref": "AWS::Region"}, "\n",
          "/opt/aws/bin/cfn-signal -e $? --stack ", {"Ref": "AWS::StackName"}, " --resource AgentASG --region ", {"Ref": "AWS::Region"}, "\n"
        ]]}}
      }
    },
    "AgentASG": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": "MasterASG",
      "Properties": {
        "LaunchConfigurationName": {"Ref": "AgentLC"},
        "MinSize": {"Ref": "AgentMinSize"},
        "MaxSize": {"Ref": "AgentMaxSize"},
        "DesiredCapacity": {"Ref": "AgentDesiredCapacity"},
        "HealthCheckGracePeriod": 600,
        "HealthCheckType": "ELB",
        "TargetGroupARNs": [{"Ref": "AgentELBTargetGroup"}],
        "VPCZoneIdentifier": [{"Ref": "SubnetA"}, {"Ref": "SubnetB"}, {"Ref": "SubnetC"}],
        "Tags": [{
          "PropagateAtLaunch": true,
          "Value": "jenkins-agent",
          "Key": "Name"
        }]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT10M",
          "Count": {"Fn::If": ["ZeroAgents", "0", "1"]}
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "PauseTime": "PT10M",
          "WaitOnResourceSignals": true
        }
      }
    },
    "AgentTerminatingLifecycleHookQueue": {
       "Type": "AWS::SQS::Queue",
       "Properties": {
          "QueueName": {"Fn::Join": ["", [{"Ref": "AWS::StackName"}, "-terminating-lifecycle-hook"]]},
          "VisibilityTimeout": {"Ref": "AgentMaxBuildWaitTimeInSeconds"}
       }
    },
    "AgentTerminatingLifecycleHook": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "HeartbeatTimeout": {"Ref": "AgentMaxBuildWaitTimeInSeconds"},
        "DefaultResult": "CONTINUE",
        "AutoScalingGroupName": {"Ref": "AgentASG"},
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": {"Fn::GetAtt": ["AgentTerminatingLifecycleHookQueue", "Arn"]},
        "RoleARN": { "Ref": "AgentTerminatingLifecycleHookIAMRole" }
      }
    },
    "AgentScalingUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {"Ref": "AgentASG"},
        "Cooldown": "300",
        "ScalingAdjustment": "1"
      }
    },
    "BuildQueueHighAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Maximum",
        "Threshold": "1",
        "AlarmDescription": "Alarm if Build Queue is high.",
        "Period": "60",
        "AlarmActions": [{"Ref": "AgentScalingUpPolicy"}],
        "Namespace": {"Ref": "AWS::StackName"},
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "MetricName": "BuildQueue"
      }
    },
    "AgentScalingDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {"Ref": "AgentASG"},
        "Cooldown": "300",
        "ScalingAdjustment": "-1"
      }
    },
    "BuildQueueEmptyAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Maximum",
        "Threshold": "0",
        "AlarmDescription": "Alarm if Build Queue is empty.",
        "Period": "60",
        "AlarmActions": [{"Ref": "AgentScalingDownPolicy"}],
        "Namespace": {"Ref": "AWS::StackName"},
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "MetricName": "BuildQueue"
      }
    }
  },
  "Outputs": {
    "AdminUsername": {
      "Value": "admin",
      "Description": "User name for the Jenkins admin."
    },
    "MasterEndpoint": {
      "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["MasterELB", "DNSName"]}]]},
      "Description": "The DNS name for the Jenkins Master load balancer."
    }
  }
}
